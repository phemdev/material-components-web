//
// Copyright 2020 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use 'sass:string';
@use 'sass:list';
@use 'sass:selector';

$_host: ':host';
$_host-parens: ':host(';
$_end-parens: ')';

/// Given one or more selectors, this mixin will fix any invalid `:host` parent
/// nesting by adding parentheses or inserting the nested selector into the
/// parent `:host()` selector's parentheses. The content block provided to
/// this mixin
/// will be projected under the new selectors.
///
/// @example
///   :host([outlined]), :host, :host button {
///     @include host-aware(selector.append(&, ':hover'), &)) {
///       --my-custom-prop: blue;
///     }
///   }
///
/// will output (but with selectors on a single line):
/// :host([outlined]:hover), // Appended :hover argument
/// :host(:hover),
/// :host button:hover,
/// :host([outlined]), // Ampersand argument
/// :host,
/// :host button, {
///   --my-custom-prop: blue;
/// };
///
/// @param {List} $selector-args - One or more selectors to be fixed for invalid
/// :host syntax.
@mixin host-aware($selector-args...) {
  $selectors: _flatten-selectors($selector-args...);
  $processed-selectors: ();

  @each $selector in $selectors {
    $first-selector: list.nth($selector, 1);

    @if _host-selector-needs-to-be-fixed($first-selector) {
      $selector: list.set-nth(
        $selector,
        1,
        _fix-host-selector($first-selector)
      );

      $processed-selectors: list.append(
        $processed-selectors,
        $selector,
        $separator: comma
      );
    } @else {
      // Either not in :host, or there are more selectors following the :host
      // and nothing needs to be modified. The content can be placed within the
      // original selector
      $processed-selectors: list.append(
        $processed-selectors,
        $selector,
        $separator: comma
      );
    }
  }

  @if list.length($processed-selectors) > 0 {
    @at-root {
      #{$processed-selectors} {
        @content;
      }
    }
  }
}

/// Determines whether a selector needs to be processed.
/// Selectors that need to be processed would include anything of the format
/// `^:host(\(.*\))?.+` e.g. `:host([outlined]):hover` or `:host:hover` but not
/// `:host` or `:host([outlined])`
///
/// @param {String} $selector - Selector string to be processed
/// @return {Boolean} Whether or not the given selector string needs to be fixed
///     for an invalid :host selector
@function _host-selector-needs-to-be-fixed($selector) {
  $host-index: string.index($selector, $_host);
  $begins-with-host: $host-index == 1;

  @if not $begins-with-host {
    @return false;
  }

  $_host-parens-index: _get-last-end-parens-index($selector);
  $has-parens: $_host-parens-index != null;

  @if $has-parens {
    // e.g. :host(.inside).after -> needs to be fixed
    // :host(.inside) -> does not need to be fixed
    $end-parens-index: string.index($selector, $_end-parens);
    $content-after-parens: string.slice($selector, $end-parens-index + 1);

    $has-content-after-parens: string.length($selector) > $end-parens-index;

    @return $has-content-after-parens;
  } @else {
    // e.g. :host.after -> needs to be fixed
    // :host -> does not need to be fixed
    $has-content-after-host: $selector != $_host;

    @return $has-content-after-host;
  }
}

/// Flattens a list of selectors
///
/// @param {List} $selector-args - A list of selectors to flatten
/// @return {List} Flattened selectors
@function _flatten-selectors($selector-args...) {
  $selectors: ();
  @each $selector-list in $selector-args {
    $selectors: list.join($selectors, $selector-list);
  }

  @return $selectors;
}

/// Fixes an invalid `:host` selector of the format `^:host(\(.*\))?.+` to
/// `:host(.+)`
/// @example
///   @debug _fix-host-selector(':host:hover') // :host(:hover)
///   @debug _fix-host-selector(':host([outlined]):hover) // :host([outlined]:hover)
///
/// @param {String} $selector - Selector string to be fixed that follows the
///     following format: `^:host(\(.*\))?.+`
/// @return {String} Fixed host selector.
@function _fix-host-selector($selector) {
  $_host-parens-index: string.index($selector, $_host-parens);
  $has-parens: $_host-parens-index != null;
  $new-host-inside: '';

  @if $has-parens {
    // e.g. :host(.inside).after -> :host(.inside.after)
    $end-parens-index: _get-last-end-parens-index($selector);
    $inside-host-parens: string.slice(
      $selector,
      string.length($_host-parens) + 1,
      $end-parens-index - 1
    );
    $after-host-parens: string.slice($selector, $end-parens-index + 1);

    $new-host-inside: $inside-host-parens + $after-host-parens;
  } @else {
    // e.g. :host.after -> :host(.after)
    $new-host-inside: string.slice($selector, string.length($_host) + 1);
  }

  @return ':host(#{$new-host-inside})';
}

/// Returns the index of the final occurrence of the end-parenthesis in the
/// given string or null if there is none.
///
/// @param {String} $string - The string to be searched
/// @return {null|Number}
@function _get-last-end-parens-index($string) {
  $index: string.length($string);

  @while $index > 0 {
    $char: string.slice($string, $index, $index);
    @if $char == $_end-parens {
      @return $index;
    }

    $index: $index - 1;
  }

  @return null;
}
